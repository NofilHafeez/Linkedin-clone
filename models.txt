generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String         @id @default(cuid())
  name                  String
  email                 String         @unique
  bio                   String?
  createdAt             DateTime       @default(now())
  password              String?
  profilePic            String?
  status                Status         @default(offline)
  bannerPic             String?
  location              String?
  title                 String?
  education             Json?
  experience            Json?
  skills                Json?
  viewedProfile         Int            @default(0)
  comments              Comment[]
  receivedConnections   Connection[]   @relation("ReceiverConnections")
  sentConnections       Connection[]   @relation("RequesterConnections")
  likes                 Like[]
  sentMessages          Message[]      @relation("SentMessages")
  receivedNotifications Notification[] @relation("ReceivedNotifications")
  sentNotifications     Notification[] @relation("SentNotifications")
  posts                 Post[]
  rooms                 Room[]         @relation("RoomUsers")
}

model Post {
  id        String    @id @default(cuid())
  text      String
  imageUrl  String
  createdAt DateTime  @default(now())
  userId    String
  comments  Comment[]
  likes     Like[]
  user      User      @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  postId    String
  userId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId], name: "postId_userId")
}

model Room {
  id        String    @id @default(cuid())
  name      String?
  isGroup   Boolean   @default(false)
  createdAt DateTime  @default(now())
  messages  Message[]
  users     User[]    @relation("RoomUsers")
}

model Message {
  id        String   @id @default(cuid())
  senderId  String
  text      String
  createdAt DateTime @default(now())
  roomId    String
  room      Room     @relation(fields: [roomId], references: [id])
  sender    User     @relation("SentMessages", fields: [senderId], references: [id])
}

model Connection {
  id          String   @id @default(cuid())
  requesterId String
  receiverId  String
  status      String   @default("PENDING")
  createdAt   DateTime @default(now())
  receiver    User     @relation("ReceiverConnections", fields: [receiverId], references: [id])
  requester   User     @relation("RequesterConnections", fields: [requesterId], references: [id])
}

model Notification {
  id         String   @id @default(cuid())
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  receiverId String
  senderId   String
  receiver   User     @relation("ReceivedNotifications", fields: [receiverId], references: [id])
  sender     User     @relation("SentNotifications", fields: [senderId], references: [id])
}

model Comment {
  id          String   @id @default(cuid())
  commenterId String
  text        String
  postId      String
  createdAt   DateTime @default(now())
  commenter   User     @relation(fields: [commenterId], references: [id])
  post        Post     @relation(fields: [postId], references: [id])
}

enum Status {
  online
  offline
  away
}
